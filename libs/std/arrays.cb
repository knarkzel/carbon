all := fn xs, f {
  for x in xs { 
    if !f(x) { return false } 
  }
  true
}

any := fn xs, f {
  for x in xs { 
    if f(x) { return true } }
  false
}

filter := fn xs, f {
  ys := []
  for x in xs {
    if f(x) {
      ys.push(x)
    }
  }
  ys
}

has := fn xs, x {
  for y in xs {
    if x == y {
      return true
    }
  }
  false
}

join := fn xs, x {
  s := ""
  for i in 0..(xs.length() - 1) {
    s += if i > 0 { x } else { "" } + xs[i]
  }
  s
}

map := fn xs, f {
  ys := []
  for x in xs {
    ys.push(f(x))
  }
  ys
}

repeat := fn x, n {
  xs := []
  for _ in 1..n {
    xs.push(x.clone())
  }
  xs
}

reverse := fn xs {
  count := xs.length()
  ys := unit.repeat(count)
  for i in 0..(count - 1) {
    ys[count - i - 1] = xs[i]
  }
  ys
}

sum := fn xs {
  acc := 0
  for x in xs { acc += x }
  acc
}

transpose := fn mat {
  height := mat.length()
  width := mat[0].length()
  res := unit.repeat(height).repeat(width)
  for y in 0..(height - 1) {
    for x in 0..(width - 1) {
      res[x][y] = mat[y][x]
    }
  }
  res
}
